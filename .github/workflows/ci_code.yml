name: Lint, format and test code
on:
  workflow_dispatch:
  pull_request:
    paths:
      - app/**
      - .github/workflows/ci_code.yml

env:
  TERRAGRUNT_VERSION: v0.31.1

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Audit DNS requests
        uses: cds-snc/dns-proxy-action@main
        env:
          DNS_PROXY_FORWARDTOSENTINEL: "true"
          DNS_PROXY_LOGANALYTICSWORKSPACEID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          DNS_PROXY_LOGANALYTICSSHAREDKEY: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Setup python
        uses: actions/setup-python@b64ffcaf5b410884ad320a9cfac8866006a109aa # v4.8.0
        with:
          python-version: "3.11"

      - name: Install dev dependencies
        working-directory: ./app
        run: make install-dev

      - name: Install dependencies
        working-directory: ./app
        run: make install

      - name: Lint
        working-directory: ./app
        run: make lint-ci

      - name: Format
        working-directory: ./app
        run: make fmt-ci

      - name: Test
        working-directory: ./app
        run: make test
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          SESSION_SECRET_KEY: ${{ secrets.SESSION_SECRET_KEY }}
          NOTIFY_TEST_KEY: ${{ secrets.NOTIFY_TEST_KEY }}
          NOTIFY_SRE_USER_NAME: ${{ secrets.NOTIFY_SRE_USER_NAME }}
          NOTIFY_SRE_CLIENT_SECRET: ${{ secrets.NOTIFY_SRE_CLIENT_SECRET }}
          NOTIFY_OPS_CHANNEL_ID: ${{ secrets.NOTIFY_OPS_CHANNEL_ID }}
          SRE_BOT_EMAIL: ${{ secrets.SRE_BOT_EMAIL }}
          AWS_ORG_ACCOUNT_ROLE_ARN: ${{ secrets.AWS_ORG_ACCOUNT_ROLE_ARN }}

      - name: Find previous comment
        id: find-comment
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { data: comments } = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            comments.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            const comment = comments.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('Lint, format and test code results'));
            return comment ? comment.id : null;

      - name: Update comment
        if: steps.find-comment.outputs.result != 'null'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: steps.find-comment.outputs.result,
              body: 'Lint, format and test code results: ...',
            });

      - name: Create comment
        if: steps.find-comment.outputs.result == 'null'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Lint, format and test code results: ...',
            });